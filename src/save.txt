ln -s "$PWD"/llvm-project/llvm/lib/clang lib/clang

static string trim(const string& s) {
    std::size_t i = s.find_first_not_of(" ");
    std::size_t j = s.find_last_not_of(" ");
    if (i != string::npos && j != string::npos && i <= j)
        return s.substr(i, j - i + 1);
    return s;
}

static bool startsWith(const string& s, const string& prefix) {
    return s.length() >= prefix.length() &&
        std::mismatch(prefix.begin(), prefix.end(), s.begin()).first == prefix.end();
}

static bool endsWith(const string& s, const string& prefix) {
    return s.length() >= prefix.length() &&
        std::mismatch(prefix.rbegin(), prefix.rend(), s.rbegin()).first == prefix.rend();
}

static vector<string> readNonEmptyLines(const string& filePath) {
    vector<string> lines;
    ifstream file{filePath.c_str()};
    string line;

    while (std::getline(file, line)) {
        if (line.find_first_not_of(" \t\r\n") != string::npos)
            lines.push_back(line);
    }

    return lines;
}

static string pathConcat(const string& directory, const string& fileName) {
    return directory + "/" + fileName;
}

static void heuristicIncludeSearchPaths(const string& tempDirectory, vector<string>& compilationOptions) {
    vector<string> searchPaths;
    // Try to infer for g++
    bool foundGccIncludeDirectories = false;
    const char* cxx = ::getenv("CXX");
    if (!cxx)
        cxx = "g++";
    const string emptyFileName = pathConcat(tempDirectory, "empty.cpp");
    const string emptyFileName2 = pathConcat(tempDirectory, "empty.exe");
    const string gccLogFileName = pathConcat(tempDirectory, "gcclog.txt");
    (void)std::ofstream(emptyFileName.c_str());
    // TODO: escape whitespace and quotes.
    // TODO: use correct locale somehow.
    std::stringstream command;
    command << cxx << " -x c++ -c -v " << emptyFileName << " -o " << emptyFileName2 << " 2>" << gccLogFileName;
    std::system(command.str().c_str());
    ifstream logFile(gccLogFileName.c_str());
    string line;
    bool isSearchList = false;
    while (std::getline(logFile, line)) {
        if (startsWith(line, "End of search list"))
            break;

        if (endsWith(line, "search starts here:"))
            isSearchList = true;
        else if (isSearchList) {
            foundGccIncludeDirectories = true;
            searchPaths.push_back(trim(line));
        }
    }

    if (foundGccIncludeDirectories) {
        // Don't let clang guess libstdc++ include directories, but still use clang builtin path.
        compilationOptions.push_back("-nostdlibinc");
    }

    for (string& s : searchPaths) {
        // std::cout << "Search path: '" << s << "'" << std::endl;
        compilationOptions.push_back("-isystem");
        compilationOptions.push_back(std::move(s));
    }
}


